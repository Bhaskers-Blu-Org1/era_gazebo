<launch>

  <arg name="namespace" default="r0" />
  
  <arg name="initX" default="0" />
  <arg name="initY" default="0" />
  <arg name="initYaw" default="0" />

  <arg name="base"/>
  <arg name="stacks"/>
  <arg name="3d_sensor"/>

  <!-- Added by Gio -->
  <arg name="kobuki_publish_tf" default="true"/> <!-- Publish base_footprint - odom transforms (usually good thing to have for localisation) -->
  <arg name="profiling_prefix" default=""/>
  <arg name="profiles_path" default="./"/>

  <arg name="workload_size" default="small"/>
  
  <arg name="local_port"/>
  <arg name="remote_port"/>

  <arg name="launch-prefix" default=""/>
  <arg name="prof" default="false"/>

  
  <!-- Generate the tf_prefix from the namespace -->
  <arg name="tfpre" default="$(arg namespace)_tf" />
  <!-- Put value on the parameter server in the group's namespace -->
  <param name="tf_prefix" value="$(arg namespace)_tf" />
    
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find era_gazebo)/xacro/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />

  <param name="robot_description" command="$(arg urdf_file)" />
  
  <!-- Gazebo model spawner -->
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg initX) -y $(arg initY) -Y $(arg initYaw) -unpause -urdf -param robot_description -model $(arg namespace)_mobile_base"/>
  
  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
	args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find era_gazebo)/launch/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    <!-- <remap from="/cmd_vel_mux/input/teleop" to="/cmd_vel_mux/input/teleop"/> -->
    <!-- <remap from="cmd_vel_mux/input/teleop" to="/r0/cmd_vel_mux/input/teleop"/> -->
  </node>

  <!-- Added by Gio -->
  <node pkg="nodelet" type="nodelet" name="mobile_base"
	args="load kobuki_node/KobukiNodelet mobile_base_nodelet_manager">
    <rosparam file="$(find kobuki_node)/param/base.yaml" command="load"/>
    <param name="publish_tf" value="$(arg kobuki_publish_tf)"/>
    <remap from="mobile_base/odom" to="odom"/>
    <remap from="mobile_base/joint_states" to="joint_states"/>
  </node>

  <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
  <include file="$(find era_gazebo)/launch/bumper2pc.launch.xml"/>
  
  <!-- Start the state publisher node in the namespace - uses the joint
       states from gazebo along with the URDF model (robot_description)
       to publish the joint positions to /tf --> 
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Added by Gio -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher"/>

  <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster"
  	args="$(arg initX) $(arg initY) 0 $(arg initYaw) 0 0 /map /$(arg tfpre)/odom 100"/>
  <node pkg="tf" type="static_transform_publisher" name="map_map_broadcaster"
	args="0 0 0 0 0 0 /map /$(arg tfpre)/map 100"/>
  <!-- <node pkg="tf" type="static_transform_publisher" name="odom_basefootprint_broadcaster" args="$(arg initX) $(arg initY) 0 $(arg initYaw) 0 0 /$(arg tfpre)/odom /$(arg tfpre)/base_footprint 100" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="baselink_odom_broadcaster" args="$(arg initX) $(arg initY) 0 $(arg initYaw) 0 0 /map /$(arg tfpre)/odom 100" /> -->
 
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
	args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <!-- <param name="output_frame_id" value="/$(arg tfpre)/camera_depth_frame"/> -->
    <param name="output_frame_id" value="$(arg tfpre)/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/$(arg namespace)/camera/depth/image_raw"/>
    <remap from="scan" to="/$(arg namespace)/scan"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="depthimage_to_pointcloud"
	 args="load depth_image_proc/point_cloud_xyz laserscan_nodelet_manager">
    <remap from="camera_info" to="/$(arg namespace)/camera/depth/camera_info"/>
    <remap from="image_rect" to="/$(arg namespace)/camera/depth/image_raw"/>
  </node>

  <!-- OpenSlam's Gmapping -->
  <!--
  <include file="$(find era_gazebo)/launch/gmapping.launch.xml">
    <arg name="tfpre" value="$(arg tfpre)" />
    <arg name="scan_topic" value="/$(arg namespace)/scan" />
    <arg name="map_topic" value="/$(arg namespace)/map" />
  </include>
  -->

  <!-- Costmap 2D -->
  <node name="static_tf0" pkg="tf" type="static_transform_publisher" args="2 0 0 0 0 0 /map /base_footprint 100"/>
  <node name="costmap_node" pkg="costmap_2d" type="costmap_2d_node" >
    <rosparam file="$(find era_gazebo)/launch/costmap_2d.yaml" command="load" ns="costmap" />
    <remap from="costmap_node/costmap/costmap" to="map"/>
  </node>
  
  <!-- Google's Cartographer -->
  <!--
  <include file="$(find era_gazebo)/launch/cartographer.launch.xml">
    <arg name="config_basename" value="$(arg namespace).lua" />
    <arg name="tfpre" value="$(arg tfpre)" />
    <arg name="scan_topic" value="/$(arg namespace)/scan" />
    <arg name="imu_topic" value="/$(arg namespace)/imu" />
    <arg name="submap_list_topic" value="/$(arg namespace)/submap_list_topic" />
    <arg name="map_topic" value="/$(arg namespace)/map" />
  </include>
  -->

  <!--  
  <include file="$(find era_gazebo)/launch/hector_mapping.launch.xml">
    <arg name="tfpre" default="$(arg tfpre)" />
  </include>
  -->
  
  <!-- GNURadio flowgraph
       Possible values for the GNURadio flowgraph configuration parameters:
         encoding:  0 (BPSK 1/2), 1 (BPSK 3/4), 2 (QPSK 1/2), 3 (QPSK 3/4), 4 (16QAM 1/2), 5 (16QAM 3/4), 6 (64QAM 2/3), 7 (64QAM 3/4)
         freq:      anything in the supported band (5.850-5.925 GHz)
         samp_rate: 5e6 (5 MHz), 10e6 (10 MHz), 20e6 (20 MHz)
         tx_gain:   0.0 to 1.0 in steps of 0.01
         rx_gain:   0.0 to 1.0 in steps of 0.01
         chan_est:  0 (ieee802_11.LS), 1 (ieee802_11.LMS), 2 (ieee802_11.COMB), 3 (ieee802_11.STA)
         lo_offset: 0, 6e6, 11e6
   -->

  <node pkg="dsrc" name="wifi_transceiver"
    launch-prefix=""
    type="wifi_transceiver.py"
    args="--ros-namespace $(arg namespace)
          --local-port $(arg local_port)
          --remote-port $(arg remote_port)
          --encoding 0
          --freq 5890000000
          --samp-rate 10e6
          --tx-gain 0.75
          --rx-gain 0.75
          --chan-est 0
          --lo-offset 0"
    output="screen"/>

  <!-- Message Generator -->
  <node name="message_generator" pkg="era_gazebo" type="message_generator" output="screen"/>
  
  <!-- Map Fuser -->
  <node name="map_fuser" pkg="era_gazebo" type="map_fuser" output="screen"/>

  <!-- Remote agent -->
  <node pkg="dsrc" name="remote_agent" type="remote_agent" args="$(arg remote_port) $(arg local_port)" output="screen"/>

</launch>
